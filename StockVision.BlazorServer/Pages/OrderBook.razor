@page "/"
@using C1.Chart
@using C1.Blazor.Chart
@using StockVision.Core.Models
@using StockVision.Service.Interfaces
@inject IOrderBookService OrderBookService
@using ChartJs.Blazor.LineChart

@*<Chart Config="_config"></Chart>*@
<PageTitle>Order Book</PageTitle>
<h1>Order Book</h1>
<br />


<!DOCTYPE html>

<head>
<style>
* {
  box-sizing: border-box;
}

.row {
  display: flex;
  margin-left:-5px;
  margin-right:-5px;
}

.column {
  flex: 50%;
  padding: 5px;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
  border: 1px solid #ddd;
}

th, td {
  text-align: left;
  padding: 16px;
}
    </style>
</head>


    @if (FullOrderBook == null)
    {
        <p><em>Loading Order Book...</em></p>
    }
    else
    {
             <FlexChart ItemsSource="FullOrderBook.AskOrderBook.Orders"  Class="chart" BindingX="Price" ChartType="ChartType.Line" HeaderContent="Order Book" HeaderStyle="font-size:24px">
                 <SeriesCollection>
                      <Series Binding="Volume" />
                 </SeriesCollection>
                 <AxisCollection>
                      <Axis AxisType="AxisType.X" Position="Position.Bottom" AxisLine="false"   MajorTickMarks="TickMark.None"/>
                      <Axis AxisType="AxisType.Y" Position="Position.Left" Title="Volume" AxisLine="false" MajorTickMarks="TickMark.None" MajorGrid="true" />
                 </AxisCollection>
               </FlexChart>
                 <FlexChart ItemsSource="FullOrderBook.BidOrderBook.Orders"  Class="chart" BindingX="Price" ChartType="ChartType.Line" HeaderContent="Order Book" HeaderStyle="font-size:24px">
                 <SeriesCollection>
                      <Series Binding="Volume" />
                 </SeriesCollection>
                 <AxisCollection>
                      <Axis AxisType="AxisType.X" Position="Position.Bottom" AxisLine="false"   MajorTickMarks="TickMark.None"/>
                      <Axis AxisType="AxisType.Y" Position="Position.Left"  Title="Volume" AxisLine="false" MajorTickMarks="TickMark.None" MajorGrid="true" />
                 </AxisCollection>
               </FlexChart>
               
  <div class="row">
  <div class="column">
        <table >
            <thead>
                <tr>
                       <th>Share Percentage</th>
                       <th>Quantity</th>
                       <th>Value</th>
                       <th>Volume</th>
                       <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Item in FullOrderBook.AskOrderBook.Orders)
                {
                    <tr>
                        <td>@Item.SharePercentage</td>
                        <td>@Item.Quantity</td>
                        <td>@Item.OrdersValue</td>
                        <td>@Item.Volume</td>
                        <td>@Item.Price</td>
                    </tr>
                }
            </tbody>
        </table>
        </div>

        <div class="column">
               <table >
            <thead>
                <tr>
                    <th>Price</th>
                    <th>Volume</th>
                    <th>Value</th>
                    <th>Quantity</th>
                    <th>Share Percentage</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Item in FullOrderBook.BidOrderBook.Orders)
                {
                    <tr>
                        <td>@Item.Price</td>
                        <td>@Item.Volume</td>
                        <td>@Item.OrdersValue</td>
                        <td>@Item.Quantity</td>
                        <td>@Item.SharePercentage</td>
                    </tr>
                }
            </tbody>
        </table>

        </div>
    }
        </div>

@if (!string.IsNullOrEmpty(Error))
{
    <p>@Error</p>
}

    @code {
    public Core.Models.OrderBook FullOrderBook { get; set; }
    public string Error { get; set; }
   // private LineConfig _config;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            FullOrderBook = await OrderBookService.GetOrderBookFromAPI();
            // FullOrderBook = await OrderBookService.GetOrderBookFromDb();

        }
        catch (Exception e)
        {
            Error = e.Message;
        }

     //   _config = new LineConfig
     //       {
     //           Options = new LineOptions
     //           {
     //               Responsive = true,
     //               Title = new ChartJs.Blazor.Common.OptionsTitle
					//{
     //                   Display = true,
     //                   Text = "ChartJs.Blazor Pie Chart"
     //               }
     //           }
     //       };

     //   foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
     //   {
     //       _config.Data.Labels.Add(color);
     //   }

     //   LineDataset<int> dataset = new LineDataset<int>(new[] { 6, 5, 3, 7 })
     //       {

     //       };

     //   _config.Data.Datasets.Add(dataset);
    }
}
}